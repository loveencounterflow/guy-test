{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GT'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n_jkequals                 = require '../deps/jkroso-equals'\n{ hide }                  = GUY.props\nWG                        = require 'webguy'\n{ nameit }                = WG.props\n{ to_width }              = require 'to-width'\nj                         = ( P... ) -> ( crumb for crumb in P when crumb? ).join '.'\n\n\n#===========================================================================================================\n{ isa, type_of, validate, create, } = new Intertype\n  gt_message_width:\n    test:             ( x ) -> ( @isa.cardinal x ) and x > 2\n  gt_test_cfg:\n    fields:\n      auto_reset:     'boolean'\n      show_report:    'boolean'\n      show_results:   'boolean'\n      show_fails:     'boolean'\n      show_passes:    'boolean'\n      throw_on_error: 'boolean'\n      throw_on_fail:  'boolean'\n      message_width:  'gt_message_width'\n      prefix:         'text'\n    template:\n      auto_reset:     false\n      show_report:    true\n      show_results:   true\n      show_fails:     true\n      show_passes:    true\n      throw_on_error: false\n      throw_on_fail:  false\n      message_width:  300\n      prefix:         ''\n  gt_stats:\n    fields:\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      passes:   0\n      fails:    0\n  gt_totals: ### TAINT use inheritance to derive shared fields ###\n    fields:\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      passes:   0\n      fails:    0\n  # gt_report_cfg:\n  #   fields:\n  #     prefix:   'text'\n  #   template:\n  #     prefix:   ''\n\n#===========================================================================================================\nclass Assumptions\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( host, upref = null ) ->\n    hide @, '_', host\n    hide @, '_upref', upref\n    # hide @, 'pass',         nameit 'pass',          ( P... ) =>       @_pass          P...\n    # hide @, 'fail',         nameit 'fail',          ( P... ) =>       @_fail          P...\n    # hide @, 'eq',           nameit 'eq',            ( P... ) =>       @_eq            P...\n    # hide @, 'async_eq',     nameit 'async_eq',      ( P... ) =>       @_async_eq      P...\n    # hide @, 'throws',       nameit 'throws',        ( P... ) =>       @_throws        P...\n    # hide @, 'async_throws', nameit 'async_throws',  ( P... ) => await @_async_throws  P...\n    return undefined\n\n  #=========================================================================================================\n  pass: ( upref, cat, message = null ) ->\n    ref = ( j @_upref, upref )\n    @_._increment_passes 'check', ref\n    if @_.cfg.show_passes\n      if message?\n        message = @_to_message_width message\n        help ref, cat, reverse \" #{message} \"\n      else\n        help ref, cat\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ( upref, cat, message = null ) ->\n    ref = ( j @_upref, upref )\n    @_._increment_fails 'check', ref\n    @_._warn ref, if message? then \"(#{cat}) #{message}\" else cat\n    if @_.cfg.show_fails\n      if message?\n        message = @_to_message_width message\n        warn ref, cat, reverse \" #{message} \"\n      else\n        warn ref, cat\n    return null\n\n  #=========================================================================================================\n  eq: ( f, matcher ) ->\n    shortref  = @_._ref_from_function f\n    ref       = ( j @_upref, shortref )\n    #.......................................................................................................\n    try ( result = f.call @, @ ) catch error\n      message = \"expected a result but got an an error: #{rpr error.message}\"\n      @fail shortref, 'error', message\n      throw new Error message if @_.cfg.throw_on_error\n      return null\n    #.......................................................................................................\n    return @pass shortref, 'eq' if @_.equals result, matcher\n    #.......................................................................................................\n    warn ref, ( reverse ' neq ' ), \"result:     \", ( reverse ' ' + ( rpr result   ) + ' ' )\n    warn ref, ( reverse ' neq ' ), \"matcher:    \", ( reverse ' ' + ( rpr matcher  ) + ' ' )\n    @fail shortref, 'neq'\n    throw new Error \"neq:\\nresult:     #{rpr result}\\nmatcher:    #{matcher}\" if @_.cfg.throw_on_fail\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  async_eq: ( f, matcher ) -> throw new Error \"not implemented\"\n\n  #=========================================================================================================\n  throws: ( f, matcher ) ->\n    shortref  = @_._ref_from_function f\n    ref       = ( j @_upref, shortref )\n    error     = null\n    #.......................................................................................................\n    try ( urge ( j @_upref, shortref, 'Ωgt___1' ), \"`throws()` result of call:\", rpr f.call @, @ ) catch error\n      unless matcher?\n        @pass shortref, 'error ok', error.message\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_._match_error error, matcher\n        when true\n          @pass shortref, 'error ok', error.message\n        when false\n          urge ( j @_upref, shortref, 'Ωgt___2' ), \"error        \", reverse error.message  ### TAINT to be replaced ###\n          warn ( j @_upref, shortref, 'Ωgt___3' ), \"doesn't match\", reverse rpr matcher    ### TAINT to be replaced ###\n          @fail shortref, 'neq', \"error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          @fail shortref, 'type', \"expected a regex or a text, got a #{matcher_type}\"\n    #.......................................................................................................\n    unless error?\n      @fail shortref, 'noerr', \"expected an error but none was thrown\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  async_throws: ( f, matcher ) -> # new Promise ( resolve, reject ) =>\n    ###\n\n    * needs `f` to be an `asyncfunction` (although `function` will also work? better check anyway?)\n    * uses `try` / `except` clause to `await` `result` of calling `f`\n    * in case `result` is delivered, that's an error\n    * otherwise an `error` will be caught;\n      * success when `matcher` is missing, or else, when `matcher` describes `error.message`;\n      * failure otherwise\n\n    ###\n    ### TAINT check whether `f` is `asyncfunction`? ###\n    shortref  = @_._ref_from_function f\n    ref       = ( j @_upref, shortref )\n    error     = null\n    #.......................................................................................................\n    try\n      result = await f.call @, @\n    #.......................................................................................................\n    catch error\n      #.....................................................................................................\n      unless matcher?\n        @pass shortref, 'error ok', \"did throw #{rpr error.message}\"\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_._match_error error, matcher\n        when true\n          @pass shortref, 'error ok', \"did throw #{rpr error.message}\"\n        when false\n          urge \"#{ref}.Ωgt___6 error        \", reverse error.message\n          warn \"#{ref}.Ωgt___7 doesn't match\", reverse rpr matcher\n          @fail shortref, 'error nok', \"did throw but not match #{rpr error.message}\"\n        else\n          @fail shortref, 'fail', \"expected a regex or a text for matcher, got a #{matcher_type}\"\n    #.......................................................................................................\n    unless error?\n      @fail shortref, 'missing', \"expected an error but none was thrown, instead got result #{rpr result}\"\n    #.......................................................................................................\n    return null\n\n  #=========================================================================================================\n  _match_error: ( error, matcher ) ->\n    switch matcher_type = type_of matcher\n      when 'text'\n        return error.message is matcher\n      when 'regex'\n        matcher.lastIndex = 0\n        return matcher.test error.message\n    return matcher_type\n\n  #---------------------------------------------------------------------------------------------------------\n  _to_message_width: ( message ) -> ( to_width message, @_.cfg.message_width ).trimEnd()\n\n\n\n#===========================================================================================================\nclass Test extends Assumptions\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super null; @_ = @\n    @cfg = Object.freeze create.gt_test_cfg cfg\n    @totals = create.gt_totals()\n    #.......................................................................................................\n    hide @, 'test',         nameit 'test',          ( P... ) =>       @_test          P...\n    hide @, 'async_test',   nameit 'async_test',    ( P... ) => await @_async_test    P...\n    hide @, 'report',       nameit 'report',        ( P... ) =>       @_report        P...\n    hide @, 'equals',       nameit 'equals',        ( P... ) =>       @_equals        P...\n    #.......................................................................................................\n    hide @, '_KW_test_ref',                            '██_KW_test_ref'\n    hide @, 'stats',                                { '*': @totals, }\n    hide @, 'warnings',                             {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _test: ( tests... ) ->\n    @_test_inner null, tests...\n    @report() if @cfg.show_report\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _async_test: ( tests... ) ->\n    await @_async_test_inner null, tests...\n    @report() if @cfg.show_report\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_inner: ( upref, tests... ) ->\n    ### TAINT preliminary handling of arguments ###\n    for candidate in tests then switch true\n      #.....................................................................................................\n      when isa.function candidate\n        try\n          ctx = new Assumptions @, upref\n          candidate.call ctx, ctx\n        catch error\n          ref     = ( j upref, 'Ωgt___8' )\n          message = \"an unexpected error occurred when calling task #{rpr ref}; #{rpr error.message}\"\n          @fail ref, 'error', message\n          throw new Error message if @cfg.throw_on_error\n      #.....................................................................................................\n      when isa.object candidate\n        for key, property of candidate\n          @_test_inner ( j upref, key ), property\n      #.....................................................................................................\n      when not candidate?\n        ref     = ( j upref, 'Ωgt___9' )\n        @fail ref, 'missing', \"expected a test, got a #{type_of candidate}\"\n      #.....................................................................................................\n      else\n        ref = ( j upref, @_ref_from_function candidate )\n        @fail ref, 'type', \"expected a test, got a #{type_of candidate}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _async_test_inner: ( upref, tests... ) ->\n    for candidate in tests then switch true\n      #.....................................................................................................\n      when isa.function candidate\n        await @_test_inner upref, candidate\n      #.....................................................................................................\n      when isa.asyncfunction candidate\n        try\n          ctx = new Assumptions @, upref\n          await candidate.call ctx, ctx\n        catch error\n          ref     = ( j upref, 'Ωgt__11' )\n          message = \"an unexpected error occurred when calling task #{rpr ref}; #{rpr error.message}\"\n          @fail ref, 'error', message\n          throw new Error message if @cfg.throw_on_error\n      #.....................................................................................................\n      when isa.object candidate\n        for key, property of candidate\n          await @_async_test_inner ( j upref, key ), property\n      #.....................................................................................................\n      else\n        ref = ( j upref, @_ref_from_function candidate )\n        @fail ref, 'type', \"expected a test, got a #{type_of candidate}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _report: ->\n    { blue\n      red\n      gold    } = GUY.trm\n    line        = gold '—————————————————————————————————————————————————————————————————'\n    #.......................................................................................................\n    show_totals = =>\n      whisper 'Ωgt__14 ' + @cfg.prefix, line\n      whisper 'Ωgt__15 ' + @cfg.prefix, reverse GUY.trm[ color ] ( '*'.padEnd 20 ), @totals\n      whisper 'Ωgt__16 ' + @cfg.prefix, line\n      return null\n    #.......................................................................................................\n    whisper()\n    whisper 'Ωgt__17 ' + @cfg.prefix, line\n    whisper 'Ωgt__18 ' + @cfg.prefix, gold '                        🙤 GUY TEST 🙦'\n    whisper 'Ωgt__19 ' + @cfg.prefix, line\n    color = if @totals.fails is 0 then 'lime' else 'red'\n    for key, stats of @stats\n      continue if key is '*'\n      whisper 'Ωgt__20 ' + @cfg.prefix, blue ( key.padEnd 20 ), stats\n    show_totals()\n    repeat_totals = false\n    for sub_ref, messages of @warnings\n      repeat_totals = true\n      for message in messages\n        whisper 'Ωgt__21 ' + @cfg.prefix, ( red sub_ref ), reverse red \" #{message} \"\n    show_totals() if repeat_totals\n    whisper()\n    #.......................................................................................................\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment_passes:  ( level, check_ref ) -> @_increment level, 'passes', check_ref\n  _increment_fails:   ( level, check_ref ) -> @_increment level, 'fails',  check_ref\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment: ( level, key, check_ref ) ->\n    ### TAINT get rid of `level` kludge ###\n    @totals[ key ]++\n    per_test_stats  = @stats[ \"#{@_KW_test_ref}.*\"             ] ?= create.gt_stats()\n    if level is 'check'\n      per_check_stats = @stats[ \"#{@_KW_test_ref}.#{check_ref}\"  ] ?= create.gt_stats()\n      unless key is 'tests'\n        per_test_stats[ key ]++\n        per_check_stats[ key ]++\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _warn: ( ref, message ) ->\n    ( @warnings[ ref ] ?= [] ).push ( message ? './.' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ref_from_function: ( f ) ->\n    R = 'anon' if ( R = f.name ) is ''\n    # throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( R = f.name ) is ''\n    return R\n\n\n\n  #=========================================================================================================\n  # SET EQUALITY BY VALUE\n  #---------------------------------------------------------------------------------------------------------\n  _set_contains: ( set, value ) ->\n    for element from set\n      return true if @_equals element, value\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  _sets_are_equal: ( a, b ) ->\n    return false unless isa.set b\n    return false unless a.size is b.size\n    for element from a\n      return false unless @_set_contains b, element\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _equals: ( a, b ) ->\n    return false unless ( type_of a ) is ( type_of b )\n    return @_sets_are_equal a, b if isa.set a\n    return _jkequals a, b\n\n\n#===========================================================================================================\nt = new Test()\nmodule.exports = {\n  Test:         Test,\n  _TMP_test:    t,\n  test:         t.test,\n  async_test:   t.async_test,\n  equals:       t.equals,\n  eq:           t.eq,\n  throws:       t.throws,\n  async_throws: t.async_throws, }\n"
  ]
}