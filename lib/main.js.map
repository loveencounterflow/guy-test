{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nnjs_domain                = require 'domain'\n#...........................................................................................................\nCND                       = require 'cnd'\n# rpr                       = CND.rpr.bind CND\nbadge                     = 'TEST'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nASYNC                     = require 'async'\n# DIFF                      = require 'diff'\n# { jr }                    = CND\n#-----------------------------------------------------------------------------------------------------------\nrpr = jr = ( P... ) ->\n  return ( ( inspect x, rpr_settings ) for x in P ).join ' '\n{ inspect }   = require 'util'\nrpr_settings  = { depth: Infinity, maxArrayLength: Infinity, breakLength: Infinity, compact: true, }\n#-----------------------------------------------------------------------------------------------------------\ntypes                     = new ( require 'intertype' ).Intertype()\n{ type_of\n  equals      }           = types\nis_callable               = ( x ) -> ( type_of x ) in [ 'function', 'asyncfunction', ]\nxdebug                    = ( P... ) -> debug ( CND.reverse P[ 0 ] ), P[ 1 .. ]...\nxdebug                    = ->\n\nxdebug ('^guy-test@45648-1^')\n\n#===========================================================================================================\n# TEST RUNNER\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = ( x, settings = null ) ->\n  xdebug ('^guy-test@45648-2^')\n  ### TAINT should accept a handler in case testing contains asynchronous functions ###\n  ### Timeout for asynchronous operations: ###\n  settings               ?= {}\n  settings[ 'timeout'   ]?= 10e3\n  #.........................................................................................................\n  stats =\n    'test-count':   0\n    'check-count':  0\n    'meta-count':   0\n    'pass-count':   0\n    'fail-count':   0\n    'failures':     {}\n  xdebug ('^guy-test@45648-3^')\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  new_result_handler_and_tester = ( test_name ) ->\n    RH        = { 'name': test_name, }\n    T         = { 'name': test_name, _halt_on_error: false, }\n    keeper_id = null\n\n    #=======================================================================================================\n    # TIMEOUT KEEPER\n    #-------------------------------------------------------------------------------------------------------\n    RH.call_with_timeout = ( timeout, method, P..., handler ) ->\n      #.....................................................................................................\n      keeper = =>\n        # clearTimeout keeper_id\n        keeper_id = null\n        warn \"(test: #{rpr test_name}) timeout reached; proceeding with error\"\n        handler new Error \"µ65513 sorry, timeout reached (#{rpr timeout}ms) (#{rpr test_name})\"\n      #.....................................................................................................\n      keeper_id = setTimeout keeper, timeout\n      whisper \"started:   #{rpr test_name}\"\n      #.....................................................................................................\n      method P..., ( P1... ) =>\n        if keeper_id?\n          @clear_timeout()\n          return handler P1...\n        whisper \"(test: #{rpr test_name}) timeout already reached; ignoring\"\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.clear_timeout = ->\n      if keeper_id?\n        # debug '©9XSyM', \"clearing timeout for #{rpr test_name}\"\n        clearTimeout keeper_id\n        keeper_id = null\n        return true\n      return false\n\n    #-------------------------------------------------------------------------------------------------------\n    # COMPLETION / SUCCESS / ERROR\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_completion = ( handler ) ->\n      @clear_timeout()\n      whisper \"completed: #{rpr test_name}\"\n      handler()\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_success = ->\n      stats[ 'pass-count' ] += 1\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_error = ( delta, checked, error ) ->\n      xdebug ('^guy-test@45648-4^')\n      xdebug ('^guy-test@45648-5^'), T._halt_on_error\n      throw error if T._halt_on_error\n      # @clear_timeout()\n      stats[ 'fail-count' ]  += +1\n      delta                  += +1 unless error?\n      try\n        entry = CND.get_caller_info delta, error, yes\n      catch\n        xdebug ('^guy-test@45648-6^'), T._halt_on_error\n        throw error\n      throw error unless entry?\n      entry[ 'checked' ]      = checked\n      entry[ 'message' ]      = error?[ 'message' ] ? \"µ66278 Guy-test: received `null` as error\"\n      failures                = stats[ 'failures' ]\n      ( failures[ test_name ]?= [] ).push entry\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    # CHECKS\n    #-------------------------------------------------------------------------------------------------------\n    T.eq = ( P... ) ->\n      stats[ 'check-count' ] += 1\n      if equals P...\n        RH.on_success()\n      else\n        rpr_p = ( rpr p for p in P ).join '\\n'\n        message = \"not equal:\\n#{rpr_p}\"\n        RH.on_error   1, yes, new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.noteq = ( P... ) ->\n      stats[ 'check-count' ] += 1\n      unless equals P...\n        RH.on_success()\n      else\n        rpr_p = ( rpr p for p in P ).join '\\n'\n        message = \"not equal:\\n#{rpr_p}\"\n        RH.on_error   1, yes, new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.ok = ( result ) ->\n      ### Tests whether `result` is strictly `true` (not only true-ish). ###\n      stats[ 'check-count' ] += 1\n      if result is true then  RH.on_success()\n      else                    RH.on_error   1, yes, new Error \"µ67043 not OK: #{rpr result}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.rsvp_ok = ( callback ) ->\n      return ( error, P... ) =>\n        throw error if error?\n        return callback P...\n\n    #-------------------------------------------------------------------------------------------------------\n    T.rsvp_error = ( test, callback ) ->\n      return ( error, P... ) =>\n        @test_error test, error\n        return callback P...\n\n    #-------------------------------------------------------------------------------------------------------\n    T.fail = ( message ) ->\n      ### Fail with message; do not terminate test execution. ###\n      stats[ 'check-count' ] += 1\n      RH.on_error 1, yes, new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.succeed = ( message ) ->\n      ### Succeed with message; do not terminate test execution. ###\n      stats[ 'check-count' ] += 1\n      help \"succeded: #{message}\"\n      RH.on_success message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.test_error = ( test, error ) ->\n      debug '^3234^', CND.reverse CND.steel rpr error.message\n      switch type = type_of test\n        when 'text'     then return @eq error?[ 'message' ], test\n        when 'regex'    then return @ok test.test error?[ 'message' ]\n        when 'function' then return @ok test error\n      throw new Error \"µ67808 expected a text, a RegEx or a function, got a #{type}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.throws = ( test, method ) ->\n      # stats[ 'check-count' ] += 1\n      try\n        method()\n      catch error\n        xdebug ('^guy-test@45648-7^')\n        return @test_error test, error\n      throw new Error \"µ68573 expected test to fail with exception, but none was thrown\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.check = ( method, callback = null ) ->\n      ### TAINT use `callback`? other handler? ###\n      try\n        method @\n      catch error\n        xdebug ('^guy-test@45648-8^')\n        # debug '©x5edC', CND.get_caller_info_stack 0, error, 100, yes\n        # debug '©x5edC', CND.get_caller_info 0, error, yes\n        RH.on_error 0, no, error\n        # debug '©X5qsy', stats[ 'failures' ][ test_name ]\n      R =     stats[ 'failures' ][ test_name ] ? []\n      delete  stats[ 'failures' ][ test_name ]\n      stats[ 'fail-count' ] += -R.length\n      stats[ 'meta-count' ] += +R.length\n      return if callback? then callback R else R\n\n    #-------------------------------------------------------------------------------------------------------\n    T.perform = ( probe, matcher, error_pattern, method ) ->\n      switch ( arity = arguments.length )\n        when 3 then [ probe, matcher, error_pattern, method, ] = [ probe, matcher, null, error_pattern, ]\n        when 4 then null\n        else throw new Error \"µ69338 expected 3 or 4 arguments, got #{arity}\"\n      throw new Error \"µ70103 expected a function, got a #{type_of method}\" unless is_callable method\n      message_re  = new RegExp error_pattern if error_pattern?\n      try\n        result = await method()\n      catch error\n        xdebug ('^guy-test@45648-9^')\n        # throw error\n        if message_re? and ( message_re.test error.message )\n          echo CND.green jr [ probe, null, error_pattern, ]\n          @ok true\n        else\n          echo CND.indigo \"µ70868 unexpected exception\", ( jr [ probe, null, error.message, ] )\n          stack = ( error.stack.split '\\n' )[ 1 .. 5 ].join '\\n'\n          @fail \"µ71633 unexpected exception for probe #{jr probe}:\\n#{error.message}\\n#{stack}\"\n          # whisper 'µ71634', ( error.stack.split '\\n' )[ .. 10 ].join '\\n'\n          # return reject \"µ72398 failed with #{error.message}\"\n        return null\n      if error_pattern?\n        echo CND.MAGENTA \"#{jr [ probe, result, null, ]} #! expected error: #{jr error_pattern}\"\n        @fail \"µ73163 expected error, obtained result #{jr result}\"\n      else\n        xdebug ('^guy-test@45648-10^')\n        xdebug ('^guy-test@45648-10^'), { result, matcher, }, equals result, matcher\n        if equals result, matcher\n          @ok true\n          echo CND.lime jr [ probe, result, null, ]\n        else\n          # echo CND.red \"#{jr [ probe, result, null, ]} #! expected result: #{jr matcher}\"echo CND.red \"#{jr [ probe, result, null, ]}\"\n          echo CND.red \"#{jr [ probe, result, null, ]}\"\n          @fail \"\"\"µ73773 neq:\n            result:  #{jr result}\n            matcher: #{jr matcher}\"\"\"\n      return result\n\n    #-------------------------------------------------------------------------------------------------------\n    T.halt_on_error = -> @_halt_on_error = true\n\n    #-------------------------------------------------------------------------------------------------------\n    return [ RH, T, ]\n\n  #=========================================================================================================\n  # TEST EXECUTION\n  #---------------------------------------------------------------------------------------------------------\n  xdebug ('^guy-test@45648-11^')\n  run = ->\n    tasks = []\n    x = { test: x, } if is_callable x\n    xdebug ('^guy-test@45648-12^')\n    #.......................................................................................................\n    for test_name, test of x\n      xdebug ('^guy-test@45648-13^'), test_name\n      continue if test_name[ 0 ] is '_'\n      stats[ 'test-count' ]  += 1\n      test                    = test.bind x\n      [ RH, T, ]              = new_result_handler_and_tester test_name\n      #.....................................................................................................\n      do ( test_name, test, RH, T ) =>\n        #...................................................................................................\n        switch arity = test.length\n\n          #-------------------------------------------------------------------------------------------------\n          # SYNCHRONOUS TESTS\n          #-------------------------------------------------------------------------------------------------\n          when 1\n            #...............................................................................................\n            tasks.push ( handler ) ->\n              xdebug ('^guy-test@45648-14^')\n              whisper \"started:   #{rpr test_name}\"\n              try\n                test T\n              catch error\n                xdebug ('^guy-test@45648-15^')\n                RH.on_error 0, no, error\n              whisper \"completed: #{rpr test_name}\"\n              handler()\n\n          #-------------------------------------------------------------------------------------------------\n          # ASYNCHRONOUS TESTS\n          #-------------------------------------------------------------------------------------------------\n          when 2\n            #...............................................................................................\n            tasks.push ( handler ) ->\n              domain = njs_domain.create()\n              #.............................................................................................\n              domain.on 'error', ( error ) ->\n                xdebug ('^guy-test@45648-16^')\n                RH.on_error 0, no, error\n                RH.on_completion handler\n              #.............................................................................................\n              domain.run ->\n                done = ( error ) ->\n                  xdebug ('^guy-test@45648-17^')\n                  if error?\n                    xdebug ('^guy-test@45648-18^')\n                    RH.on_error 0, no, error\n                  RH.on_completion handler\n                #...........................................................................................\n                try\n                  RH.call_with_timeout settings[ 'timeout' ], test, T, done\n                #...........................................................................................\n                catch error\n                  xdebug ('^guy-test@45648-19^')\n                  RH.on_error 0, no, error\n                  RH.on_completion handler\n\n          #-------------------------------------------------------------------------------------------------\n          else throw new Error \"µ73928 expected test with 1 or 2 arguments, got one with #{arity}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    ASYNC.series tasks, ( error ) =>\n      throw error if error?\n      report()\n\n  #---------------------------------------------------------------------------------------------------------\n  report = ->\n    help \"                             --=#=--\"\n    help \"                         GUY TEST REPORT\"\n    help \"                             --=#=--\"\n    #.......................................................................................................\n    for test_name, entries of stats[ 'failures' ]\n      help \"test case: #{rpr test_name}\"\n      #.....................................................................................................\n      for entry in entries\n        warn entry[ 'message' ]\n        warn '  checked:', entry[ 'checked' ]\n        warn '  ' + entry[ 'route' ] + '#' + entry[ 'line-nr' ]\n        warn '  ' + entry[ 'source' ]\n    #.......................................................................................................\n    pass_count = stats[ 'pass-count' ]\n    fail_count = stats[ 'fail-count' ]\n    info()\n    info 'tests:   ',   stats[ 'test-count'  ]\n    info 'checks:  ',   stats[ 'check-count' ]\n    info 'metas:   ',   stats[ 'meta-count'  ]\n    ( if fail_count > 0 then whisper  else help    ) 'passes:  ', stats[ 'pass-count'  ]\n    ( if fail_count > 0 then warn     else whisper ) 'fails:   ', fail_count\n    process.exit fail_count\n\n  #---------------------------------------------------------------------------------------------------------\n  xdebug ('^guy-test@45648-20^')\n  run()\n\n\n"
  ]
}