{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'guy-test-NG'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\ntest                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n_equals                   = require '../deps/jkroso-equals'\n# equals                    = require '/home/flow/jzr/intertype-legacy/deps/jkroso-equals.js'\n# equals                    = require '/home/flow/jzr/hengist/dev/intertype-2024-04-15/src/basics.test.coffee'\n# equals                    = require ( require 'util' ).isDeepStrictEqual\n### TAINT these should become instance configuration ###\ntest_mode                 = 'throw_failures'\ntest_mode                 = 'throw_errors'\ntest_mode                 = 'failsafe'\n\n\n#===========================================================================================================\n# IMPLEMENT SET EQUALITY\n#-----------------------------------------------------------------------------------------------------------\n_set_contains = ( set, value ) ->\n  for element from set\n    return true if equals element, value\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\nequals = ( a, b ) ->\n  switch true\n    when types.isa.set a\n      return false unless types.isa.set b\n      return false unless a.size is b.size\n      for element from a\n        return false unless _set_contains b, element\n      return true\n  return _equals a, b\n\n#-----------------------------------------------------------------------------------------------------------\ntest_set_equality_by_value = ->\n  echo()\n  result    = [ 1, [ 2 ], ]\n  matcher1  = [ 1, [ 2 ], ]\n  matcher2  = [ 1, [ 3 ], ]\n  debug '^810-1^', equals result, matcher1\n  debug '^810-2^', equals result, matcher2\n  echo()\n  result    = new Set [ 1, 2, ]\n  matcher1  = new Set [ 1, 2, ]\n  matcher2  = new Set [ 1, 3, ]\n  debug '^810-3^', equals result, matcher1\n  debug '^810-4^', equals result, matcher2\n  echo()\n  result    = new Set [ 1, [ 2 ], ]\n  matcher1  = new Set [ 1, [ 2 ], ]\n  matcher2  = new Set [ 1, [ 3 ], ]\n  debug '^810-5^', equals result, matcher1\n  debug '^810-6^', equals result, matcher2\n\n\n#===========================================================================================================\n###\n\nMethod to replace `T.throws()` and `try_and_show()`; takes 2, 3, or 4 arguments; with 4 arguments, second\nargument should be error class\n\n###\nthrows = ( T, matcher, f ) ->\n  switch arity = arguments.length\n    when 2 then [ T, matcher, f, ] = [ T, null, matcher, ]\n    when 3 then null\n    else throw new Error \"`throws()` needs 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  error       = null\n  is_matching = null\n  #.........................................................................................................\n  try ( urge '^992-1^', \"`throws()` result of call:\", f() ) catch error\n    #.......................................................................................................\n    if matcher?\n      is_matching = false\n      switch matcher_type = types.type_of matcher\n        when 'text'\n          is_matching = error.message is matcher\n        when 'regex'\n          matcher.lastIndex = 0\n          is_matching = matcher.test error.message\n        else\n          throw new Error \"^992-2^ expected a regex or a text, got a #{matcher_type}\"\n      if is_matching\n        help '^992-3^', \"OK           \", reverse error.message\n      else\n        urge '^992-4^', \"error        \", reverse error.message\n        warn '^992-5^', \"doesn't match\", reverse rpr matcher\n        T?.fail \"^992-6^ error #{rpr error.message} doesn't match #{rpr matcher}\"\n    #.......................................................................................................\n    else\n      help '^992-7^', \"error        \", reverse error.message\n  #.........................................................................................................\n  unless error?\n    warn '^992-8^', reverse message = \"`throws()`: expected an error but none was thrown\"\n    T?.fail \"^992-9^ `throws()`: expected an error but none was thrown\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_match_error = ( error, matcher ) ->\n  switch matcher_type = types.type_of matcher\n    when 'text'\n      return error.message is matcher\n    when 'regex'\n      matcher.lastIndex = 0\n      return matcher.test error.message\n  return matcher_type\n\n#-----------------------------------------------------------------------------------------------------------\nthrows2 = ( T, f, matcher ) ->\n  throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n  error = null\n  #.........................................................................................................\n  try ( urge \"^#{ref}^ `throws()` result of call:\", f() ) catch error\n    unless matcher?\n      help \"^#{ref} ◀ throw2@1^ error        \", reverse error.message\n      T?.ok true\n      return null\n    #.......................................................................................................\n    switch matcher_type = _match_error error, matcher\n      when true\n        help \"^#{ref} ◀ throw2@2^ OK           \", reverse error.message\n        T?.ok true\n      when false\n        urge \"^#{ref} ◀ throw2@3^ error        \", reverse error.message\n        warn \"^#{ref} ◀ throw2@4^ doesn't match\", reverse rpr matcher\n        T?.fail \"^#{ref} ◀ throw2@5^ error #{rpr error.message} doesn't match #{rpr matcher}\"\n      else\n        message = \"expected a regex or a text, got a #{matcher_type}\"\n        warn \"^#{ref} ◀ throw2@6^\", reverse message\n        T?.fail \"^#{ref} ◀ throw2@7^ #{message}\"\n  #.........................................................................................................\n  unless error?\n    message = \"`throws()`: expected an error but none was thrown\"\n    warn \"^#{ref} ◀ throw2@8^\", reverse message\n    T?.fail \"^#{ref} ◀ throw2@9^ #{message}\"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\neq = ( ref, T, result, matcher ) ->\n  ref = ref.padEnd 15\n  if equals result, matcher\n    help ref, \"EQ OK\"\n    T?.ok true\n  else\n    warn ref, ( reverse ' neq ' ), \"result:     \", ( reverse ' ' + ( rpr result   ) + ' ' )\n    warn ref, ( reverse ' neq ' ), \"matcher:    \", ( reverse ' ' + ( rpr matcher  ) + ' ' )\n    T?.ok false\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\neq2 = ( T, f, matcher ) ->\n  throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n  try ( result = f() ) catch error\n    message = \"`eq2()`: ^#{ref}^ expected a result but got an an error: #{error.message}\"\n    warn '^992-12^', reverse message\n    T?.fail \"^992-13^ #{message}\"\n    debug '^25235234^', { test_mode}\n    if test_mode is 'throw_errors'\n      throw new Error message\n  return eq ref, T, result, matcher\n\n#===========================================================================================================\ntry_and_show = ( T, f ) ->\n  error = null\n  try ( urge '^992-10^', \"`try_and_show():` result of call:\", f() ) catch error\n    help '^992-11^', reverse \"`try_and_show()`: #{rpr error.message}\"\n  unless error?\n    warn '^992-12^', reverse message = \"`try_and_show()`: expected an error but none was thrown\"\n    T?.fail \"^992-13^ `try_and_show()`: expected an error but none was thrown\"\n  return null\n\n#===========================================================================================================\nsafeguard = ( T, f ) ->\n  error = null\n  try f() catch error\n    # throw error unless T?\n    warn '^992-14^', reverse message = \"`safeguard()`: #{rpr error.message}\"\n    T?.fail message\n  return null\n\n\nmodule.exports = { equals, eq2, throws2, }\n\n"
  ]
}