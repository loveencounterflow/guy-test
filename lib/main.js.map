{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'guy-test-NG'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n_jkequals                 = require '../deps/jkroso-equals'\n{ hide }                  = GUY.props\nWG                        = require 'webguy'\n{ nameit }                = WG.props\n### TAINT these should become instance configuration ###\ntest_mode                 = 'throw_failures'\ntest_mode                 = 'throw_errors'\ntest_mode                 = 'failsafe'\n\n\n\n#===========================================================================================================\n{ isa, type_of, validate, create, } = new Intertype\n  gt_stats:\n    fields:\n      runs:     'cardinal'\n      checks:   'cardinal'\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      runs:     0\n      checks:   0\n      passes:   0\n      fails:    0\n  gt_totals: ### TAINT use inheritance to derive shared fields ###\n    fields:\n      tests:    'cardinal'\n      checks:   'cardinal'\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      tests:    0\n      checks:   0\n      passes:   0\n      fails:    0\n  gt_report_cfg:\n    fields:\n      prefix:   'text'\n    template:\n      prefix:   ''\n\n#===========================================================================================================\nclass Test\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @totals = create.gt_totals()\n    hide @, 'test',         nameit 'test',          ( P... ) =>       @_test          P...\n    hide @, 'report',       nameit 'report',        ( P... ) =>       @_report        P...\n    hide @, 'eq',           nameit 'eq',            ( P... ) =>       @_eq            P...\n    hide @, 'async_eq',     nameit 'async_eq',      ( P... ) =>       @_async_eq      P...\n    hide @, 'throws',       nameit 'throws',        ( P... ) =>       @_throws        P...\n    hide @, 'async_throws', nameit 'async_throws',  ( P... ) => await @_async_throws  P...\n    hide @, 'equals',       nameit 'equals',        ( P... ) =>       @_equals        P...\n    hide @, '_test_ref',                            null\n    hide @, 'stats',                                { '*': @totals, }\n    hide @, 'warnings',                             {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _test: ( tests... ) ->\n    @_test_inner tests...\n    @report()\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _report: ( cfg ) ->\n    { prefix  } = create.gt_report_cfg cfg ? {}\n    { blue\n      red\n      gold    } = GUY.trm\n    whisper()\n    whisper 'Ωgt___1', prefix, gold '—————————————————————————————————————————————————————————————————'\n    whisper 'Ωgt___2', prefix, gold '                        🙤 GUY TEST 🙦'\n    whisper 'Ωgt___3', prefix, gold '—————————————————————————————————————————————————————————————————'\n    color = if @totals.fails is 0 then 'lime' else 'red'\n    for key, stats of @stats\n      continue if key is '*'\n      whisper 'Ωgt___4', prefix, blue ( key.padEnd 20 ), stats\n    whisper 'Ωgt___5', prefix, gold '—————————————————————————————————————————————————————————————————'\n    whisper 'Ωgt___6', prefix, reverse GUY.trm[ color ] ( '*'.padEnd 20 ), @totals\n    whisper 'Ωgt___7', prefix, gold '—————————————————————————————————————————————————————————————————'\n    debug '^2243^', @warnings\n    for sub_ref, message of @warnings\n      whisper 'Ωgt___8', prefix, sub_ref, reverse red \" #{message} \"\n    whisper 'Ωgt___9', prefix, gold '—————————————————————————————————————————————————————————————————'\n    whisper()\n    #.......................................................................................................\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_inner: ( tests... ) ->\n    ### TAINT preliminary handling of arguments ###\n    for candidate in tests then switch true\n        #...................................................................................................\n        when isa.function candidate\n          @_test_ref = @_ref_from_function candidate\n          @_increment_tests 'test', @_test_ref\n          try candidate.call @ catch error then finally @_test_ref = null\n        #...................................................................................................\n        when isa.object candidate\n          for key, property of candidate\n            @_test_inner property\n        #...................................................................................................\n        else\n          @_increment_fails 'test', 'Ωgt__10'\n          warn 'Ωgt__11', reverse \" expected a test, got a #{type_of candidate} \"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_async: ( tests... ) ->\n    throw new Error \"Ωgt__12 not implemented\"\n    for test in tests\n      switch true\n        when isa.function test\n          @test test\n        # when isa.object test then null\n        ### TAINT record failure and move on ###\n        else throw new Error \"Ωgt__13 expected a test, got a #{type_of test}\"\n        # when isa.asyncfunction test then null\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment_tests:   ( level, check_ref ) -> @_increment level, 'tests',  check_ref\n  _increment_checks:  ( level, check_ref ) -> @_increment level, 'checks', check_ref\n  _increment_passes:  ( level, check_ref ) -> @_increment level, 'passes', check_ref\n  _increment_fails:   ( level, check_ref ) -> @_increment level, 'fails',  check_ref\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment: ( level, key, check_ref ) ->\n    ### TAINT get rid of `level` kludge ###\n    @totals[ key ]++\n    per_test_stats  = @stats[ \"#{@_test_ref}.*\"             ] ?= create.gt_stats()\n    per_test_stats.runs++ if key is 'checks'\n    if level is 'check'\n      per_check_stats = @stats[ \"#{@_test_ref}.#{check_ref}\"  ] ?= create.gt_stats()\n      per_check_stats.runs++ if key is 'checks'\n      unless key is 'tests'\n        per_test_stats[ key ]++\n        per_check_stats[ key ]++\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _warn: ( ref, message ) ->\n    debug 'Ωgt__14', { ref, message}\n    ( @warnings[ ref ] ?= [] ).push message\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ref_from_function: ( f ) ->\n    R = 'anon' if ( R = f.name ) is ''\n    # throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( R = f.name ) is ''\n    return R\n\n\n  #=========================================================================================================\n  _eq: ( f, matcher ) ->\n    ref = @_ref_from_function f\n    @_increment_checks 'check', ref\n    #.......................................................................................................\n    try ( result = f() ) catch error\n      message = \"expected a result but got an an error: #{rpr error.message}\"\n      warn '^992-12^', ref, reverse \" #{message} \"\n      @_warn ref, message; @_increment_fails 'check', ref # T?.fail \"^992-13^ #{message}\"\n      debug '^25235234^', { test_mode}\n      if test_mode is 'throw_errors'\n        throw new Error message\n    #.......................................................................................................\n    if @equals result, matcher\n      help ref, \"EQ OK\"\n      @_increment_passes 'check', ref\n      # T?.ok true\n    #.......................................................................................................\n    else\n      warn ref, ( reverse ' neq ' ), \"result:     \", ( reverse ' ' + ( rpr result   ) + ' ' )\n      warn ref, ( reverse ' neq ' ), \"matcher:    \", ( reverse ' ' + ( rpr matcher  ) + ' ' )\n      @_warn ref, \"neq\"; @_increment_fails 'check', ref\n      # T?.ok false\n    #.......................................................................................................\n    return null\n\n  #=========================================================================================================\n  _match_error: ( error, matcher ) ->\n    switch matcher_type = type_of matcher\n      when 'text'\n        return error.message is matcher\n      when 'regex'\n        matcher.lastIndex = 0\n        return matcher.test error.message\n    return matcher_type\n\n  #---------------------------------------------------------------------------------------------------------\n  _throws: ( T, f, matcher ) ->\n    throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n    error = null\n    #.......................................................................................................\n    try ( urge \"^#{ref}^ `throws()` result of call:\", f() ) catch error\n      unless matcher?\n        help \"^#{ref} ◀ throws@1^ error        \", reverse error.message\n        T?.ok true\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          help \"^#{ref} ◀ throws@2^ OK           \", reverse error.message\n          T?.ok true\n        when false\n          urge \"^#{ref} ◀ throws@3^ error        \", reverse error.message\n          warn \"^#{ref} ◀ throws@4^ doesn't match\", reverse rpr matcher\n          T?.fail \"^#{ref} ◀ throws@5^ error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          message = \"expected a regex or a text, got a #{matcher_type}\"\n          warn \"^#{ref} ◀ throws@6^\", reverse message\n          T?.fail \"^#{ref} ◀ throws@7^ #{message}\"\n    #.......................................................................................................\n    unless error?\n      message = \"`throws()`: expected an error but none was thrown\"\n      warn \"^#{ref} ◀ throws@8^\", reverse message\n      T?.fail \"^#{ref} ◀ throws@9^ #{message}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _throws_async: ( T, f, matcher ) -> # new Promise ( resolve, reject ) =>\n    ###\n\n    * needs `f` to be an `asyncfunction` (although `function` will also work? better check anyway?)\n    * uses `try` / `except` clause to `await` `result` of calling `f`\n    * in case `result` is delivered, that's an error\n    * otherwise an `error` will be caught;\n      * success when `matcher` is missing, or else, when `matcher` describes `error.message`;\n      * failure otherwise\n\n    ###\n    throw new Error \"Ωgt__15 test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n    ### TAINT check whether `f` is `asyncfunction`? ###\n    error = null\n    #.......................................................................................................\n    try\n      result = await f()\n    #.......................................................................................................\n    catch error\n      #.....................................................................................................\n      unless matcher?\n        help \"#{ref} ◀ Ωgt__16 error OK     \", reverse error.message\n        T?.ok true\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          help \"#{ref} ◀ Ωgt__17 error OK     \", reverse error.message\n          T?.ok true\n        when false\n          urge \"#{ref} ◀ Ωgt__18 error        \", reverse error.message\n          warn \"#{ref} ◀ Ωgt__19 doesn't match\", reverse rpr matcher\n          T?.fail \"#{ref} ◀ Ωgt__20 error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          message = \"expected a regex or a text for matcher, got a #{matcher_type}\"\n          warn \"#{ref} ◀ Ωgt__21\", reverse message\n          T?.fail \"#{ref} ◀ Ωgt__22 #{message}\"\n    #.......................................................................................................\n    unless error?\n      message = \"expected an error but none was thrown, instead got result #{rpr result}\"\n      warn \"#{ref} ◀ Ωgt__23\", reverse message\n      T?.fail \"#{ref} ◀ Ωgt__24 #{message}\"\n    #.......................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  # SET EQUALITY BY VALUE\n  #---------------------------------------------------------------------------------------------------------\n  _set_contains: ( set, value ) ->\n    for element from set\n      return true if @_equals element, value\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  _sets_are_equal: ( a, b ) ->\n    return false unless isa.set b\n    return false unless a.size is b.size\n    for element from a\n      return false unless @_set_contains b, element\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _equals: ( a, b ) ->\n    return false unless ( type_of a ) is ( type_of b )\n    return @_sets_are_equal a, b if isa.set a\n    return _jkequals a, b\n\n\n#===========================================================================================================\nt = new Test()\nmodule.exports = {\n  Test:         Test,\n  _TMP_test:    t,\n  test:         t.test,\n  equals:       t.equals,\n  eq:           t.eq,\n  throws:       t.throws,\n  throws_async: t.throws_async, }\n"
  ]
}