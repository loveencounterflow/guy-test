{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GT'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n_jkequals                 = require '../deps/jkroso-equals'\n{ hide }                  = GUY.props\nWG                        = require 'webguy'\n{ nameit }                = WG.props\n{ to_width }              = require 'to-width'\n### TAINT these should become instance configuration ###\ntest_mode                 = 'throw_failures'\ntest_mode                 = 'throw_errors'\ntest_mode                 = 'failsafe'\n\n\n#===========================================================================================================\n{ isa, type_of, validate, create, } = new Intertype\n  gt_message_width:\n    test:             ( x ) -> ( @isa.cardinal x ) and x > 2\n  gt_test_cfg:\n    fields:\n      auto_reset:     'boolean'\n      show_report:    'boolean'\n      show_results:   'boolean'\n      show_fails:     'boolean'\n      show_passes:    'boolean'\n      throw_errors:   'boolean'\n      message_width:  'gt_message_width'\n      prefix:         'text'\n    template:\n      auto_reset:     false\n      show_report:    true\n      show_results:   true\n      show_fails:     true\n      show_passes:    true\n      throw_errors:   false\n      message_width:  50\n      prefix:         ''\n  gt_stats:\n    fields:\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      passes:   0\n      fails:    0\n  gt_totals: ### TAINT use inheritance to derive shared fields ###\n    fields:\n      passes:   'cardinal'\n      fails:    'cardinal'\n    template:\n      passes:   0\n      fails:    0\n  # gt_report_cfg:\n  #   fields:\n  #     prefix:   'text'\n  #   template:\n  #     prefix:   ''\n\n\n#===========================================================================================================\nclass Test\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = Object.freeze create.gt_test_cfg cfg\n    @totals = create.gt_totals()\n    #.......................................................................................................\n    hide @, 'pass',         nameit 'pass',          ( P... ) =>       @_pass          P...\n    hide @, 'fail',         nameit 'fail',          ( P... ) =>       @_fail          P...\n    hide @, 'test',         nameit 'test',          ( P... ) =>       @_test          P...\n    hide @, 'report',       nameit 'report',        ( P... ) =>       @_report        P...\n    hide @, 'eq',           nameit 'eq',            ( P... ) =>       @_eq            P...\n    hide @, 'async_eq',     nameit 'async_eq',      ( P... ) =>       @_async_eq      P...\n    hide @, 'throws',       nameit 'throws',        ( P... ) =>       @_throws        P...\n    hide @, 'equals',       nameit 'equals',        ( P... ) =>       @_equals        P...\n    #.......................................................................................................\n    hide @, 'async_test',   nameit 'async_test',    ( P... ) => await @_async_test    P...\n    hide @, 'async_throws', nameit 'async_throws',  ( P... ) => await @_async_throws  P...\n    #.......................................................................................................\n    hide @, '_test_ref',                            null\n    hide @, 'stats',                                { '*': @totals, }\n    hide @, 'warnings',                             {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _test: ( tests... ) ->\n    @_test_inner tests...\n    @report() if @cfg.show_report\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _async_test: ( tests... ) ->\n    await @_async_test_inner tests...\n    @report() if @cfg.show_report\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_inner: ( tests... ) ->\n    ### TAINT preliminary handling of arguments ###\n    for candidate in tests then switch true\n      #.....................................................................................................\n      when isa.function candidate\n        @_test_ref = ref = @_ref_from_function candidate\n        # @_increment_tests 'test', ref\n        try\n          candidate.call @\n        catch error\n          @fail ref, 'error', \"an unexpected error occurred when calling task #{rpr ref}; #{rpr error.message}\"\n        finally @_test_ref = null\n      #.....................................................................................................\n      when isa.object candidate\n        for key, property of candidate\n          @_test_inner property\n      #.....................................................................................................\n      when not candidate?\n        ref     = 'Ωgt___1'\n        @fail ref, 'missing', \"expected a test, got a #{type_of candidate}\"\n      #.....................................................................................................\n      else\n        ref     = @_ref_from_function candidate\n        ref     = 'Ωgt___2' if ref is 'anon'\n        @fail ref, 'type', \"expected a test, got a #{type_of candidate}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _async_test_inner: ( tests... ) ->\n    for candidate in tests then switch true\n      #.....................................................................................................\n      when isa.function candidate\n        @_test_inner candidate\n      #.....................................................................................................\n      when isa.asyncfunction candidate\n        @_test_ref = @_ref_from_function candidate\n        # @_increment_tests 'test', @_test_ref\n        try await candidate.call @ catch error then finally @_test_ref = null\n      #.....................................................................................................\n      when isa.object candidate\n        for key, property of candidate\n          await @_async_test_inner property\n      #.....................................................................................................\n      else\n        ref     = @_ref_from_function candidate\n        ref     = 'Ωgt___3' if ref is 'anon'\n        @fail ref, 'type', \"expected a test, got a #{type_of candidate}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _report: ->\n    { blue\n      red\n      gold    } = GUY.trm\n    line        = gold '—————————————————————————————————————————————————————————————————'\n    #.......................................................................................................\n    show_totals = =>\n      whisper 'Ωgt___4 ' + @cfg.prefix, line\n      whisper 'Ωgt___5 ' + @cfg.prefix, reverse GUY.trm[ color ] ( '*'.padEnd 20 ), @totals\n      whisper 'Ωgt___6 ' + @cfg.prefix, line\n      return null\n    #.......................................................................................................\n    whisper()\n    whisper 'Ωgt___7 ' + @cfg.prefix, line\n    whisper 'Ωgt___8 ' + @cfg.prefix, gold '                        🙤 GUY TEST 🙦'\n    whisper 'Ωgt___9 ' + @cfg.prefix, line\n    color = if @totals.fails is 0 then 'lime' else 'red'\n    for key, stats of @stats\n      continue if key is '*'\n      whisper 'Ωgt__10 ' + @cfg.prefix, blue ( key.padEnd 20 ), stats\n    show_totals()\n    repeat_totals = false\n    for sub_ref, messages of @warnings\n      repeat_totals = true\n      for message in messages\n        whisper 'Ωgt__11 ' + @cfg.prefix, ( red sub_ref ), reverse red \" #{message} \"\n    show_totals() if repeat_totals\n    whisper()\n    #.......................................................................................................\n    return @stats\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment_passes:  ( level, check_ref ) -> @_increment level, 'passes', check_ref\n  _increment_fails:   ( level, check_ref ) -> @_increment level, 'fails',  check_ref\n\n  #---------------------------------------------------------------------------------------------------------\n  _pass: ( ref, cat, message = null ) ->\n    message ?= \"(no message given)\"\n    @_increment_passes 'check', ref\n    if @cfg.show_passes\n      if message?\n        message = to_width message, @cfg.message_width\n        help ref, cat, reverse \" #{message} \"\n      else\n        help ref, cat\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _fail: ( ref, cat, message = null ) ->\n    @_increment_fails 'check', ref\n    ref = \"#{@_test_ref}.#{ref}\"\n    @_warn ref, if message? then \"(#{cat}) #{message}\" else cat\n    if @cfg.show_fails\n      if message?\n        message = to_width message, @cfg.message_width\n        warn ref, cat, reverse \" #{message} \"\n      else\n        warn ref, cat\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _increment: ( level, key, check_ref ) ->\n    ### TAINT get rid of `level` kludge ###\n    @totals[ key ]++\n    per_test_stats  = @stats[ \"#{@_test_ref}.*\"             ] ?= create.gt_stats()\n    if level is 'check'\n      per_check_stats = @stats[ \"#{@_test_ref}.#{check_ref}\"  ] ?= create.gt_stats()\n      unless key is 'tests'\n        per_test_stats[ key ]++\n        per_check_stats[ key ]++\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _warn: ( ref, message ) ->\n    ( @warnings[ ref ] ?= [] ).push ( message ? './.' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ref_from_function: ( f ) ->\n    R = 'anon' if ( R = f.name ) is ''\n    # throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( R = f.name ) is ''\n    return R\n\n\n  #=========================================================================================================\n  _eq: ( f, matcher ) ->\n    ref = @_ref_from_function f\n    #.......................................................................................................\n    try ( result = f() ) catch error\n      message = \"expected a result but got an an error: #{rpr error.message}\"\n      @fail \"#{ref}.Ωgt__12\", 'error', message\n      throw new Error message if test_mode is 'throw_errors'\n      return null\n    #.......................................................................................................\n    return @pass \"#{ref}.Ωgt__13\", 'eq' if @equals result, matcher\n    #.......................................................................................................\n    warn \"#{ref}.Ωgt__14\", ( reverse ' neq ' ), \"result:     \", ( reverse ' ' + ( rpr result   ) + ' ' )\n    warn \"#{ref}.Ωgt__15\", ( reverse ' neq ' ), \"matcher:    \", ( reverse ' ' + ( rpr matcher  ) + ' ' )\n    @fail \"#{ref}.Ωgt__16\", 'neq'\n    #.......................................................................................................\n    return null\n\n  #=========================================================================================================\n  _match_error: ( error, matcher ) ->\n    switch matcher_type = type_of matcher\n      when 'text'\n        return error.message is matcher\n      when 'regex'\n        matcher.lastIndex = 0\n        return matcher.test error.message\n    return matcher_type\n\n  #---------------------------------------------------------------------------------------------------------\n  _throws: ( f, matcher ) ->\n    ref   = @_ref_from_function f\n    error = null\n    #.......................................................................................................\n    try ( urge \"^#{ref}^ `throws()` result of call:\", f() ) catch error\n      unless matcher?\n        @pass \"#{ref}.Ωgt__17\", 'error ok', error.message\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          @pass \"#{ref}.Ωgt__18\", 'error ok', error.message\n        when false\n          urge \"^#{ref}.Ωgt__19^ error        \", reverse error.message  ### TAINT to be replaced ###\n          warn \"^#{ref}.Ωgt__20^ doesn't match\", reverse rpr matcher    ### TAINT to be replaced ###\n          @fail \"#{ref}.Ωgt__21\", 'neq', \"error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          @fail \"#{ref}.Ωgt__22\", 'type', \"expected a regex or a text, got a #{matcher_type}\"\n    #.......................................................................................................\n    unless error?\n      @fail \"#{ref}.Ωgt__23\", 'noerr', \"expected an error but none was thrown\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _async_throws: ( f, matcher ) -> # new Promise ( resolve, reject ) =>\n    ###\n\n    * needs `f` to be an `asyncfunction` (although `function` will also work? better check anyway?)\n    * uses `try` / `except` clause to `await` `result` of calling `f`\n    * in case `result` is delivered, that's an error\n    * otherwise an `error` will be caught;\n      * success when `matcher` is missing, or else, when `matcher` describes `error.message`;\n      * failure otherwise\n\n    ###\n    ### TAINT check whether `f` is `asyncfunction`? ###\n    ref   = @_ref_from_function f\n    error = null\n    #.......................................................................................................\n    try\n      result = await f()\n    #.......................................................................................................\n    catch error\n      #.....................................................................................................\n      unless matcher?\n        @pass \"#{ref}.Ωgt__24\", 'error ok', \"did throw #{rpr error.message}\"\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          @pass \"#{ref}.Ωgt__25\", 'error ok', \"did throw #{rpr error.message}\"\n        when false\n          urge \"#{ref}.Ωgt__26 error        \", reverse error.message\n          warn \"#{ref}.Ωgt__27 doesn't match\", reverse rpr matcher\n          @fail \"#{ref}.Ωgt__28\", 'error nok', \"did throw but not match #{rpr error.message}\"\n        else\n          @fail \"#{ref}.Ωgt__29\", 'fail', \"expected a regex or a text for matcher, got a #{matcher_type}\"\n    #.......................................................................................................\n    unless error?\n      @fail \"#{ref}.Ωgt__30\", 'missing', \"expected an error but none was thrown, instead got result #{rpr result}\"\n    #.......................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  # SET EQUALITY BY VALUE\n  #---------------------------------------------------------------------------------------------------------\n  _set_contains: ( set, value ) ->\n    for element from set\n      return true if @_equals element, value\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  _sets_are_equal: ( a, b ) ->\n    return false unless isa.set b\n    return false unless a.size is b.size\n    for element from a\n      return false unless @_set_contains b, element\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _equals: ( a, b ) ->\n    return false unless ( type_of a ) is ( type_of b )\n    return @_sets_are_equal a, b if isa.set a\n    return _jkequals a, b\n\n\n#===========================================================================================================\nt = new Test()\nmodule.exports = {\n  Test:         Test,\n  _TMP_test:    t,\n  test:         t.test,\n  async_test:   t.async_test,\n  equals:       t.equals,\n  eq:           t.eq,\n  throws:       t.throws,\n  async_throws: t.async_throws, }\n"
  ]
}