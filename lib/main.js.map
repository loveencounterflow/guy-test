{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'guy-test-NG'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n_test                     = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n_jkequals                 = require '../deps/jkroso-equals'\n{ hide }                  = GUY.props\nWG                        = require 'webguy'\n{ nameit }                = WG.props\n### TAINT these should become instance configuration ###\ntest_mode                 = 'throw_failures'\ntest_mode                 = 'throw_errors'\ntest_mode                 = 'failsafe'\n\n\n\n#===========================================================================================================\nclass Test\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    hide @, 'test',         nameit 'test',          ( P... ) =>       _test           P...\n    hide @, 'throws',       nameit 'throws',        ( P... ) =>       @_throws        P...\n    hide @, 'throws_async', nameit 'throws_async',  ( P... ) => await @_throws_async  P...\n    hide @, 'equals',       nameit 'equals',        ( P... ) =>       @_equals        P...\n    hide @, 'eq',           nameit 'eq',            ( P... ) =>       @_eq            P...\n    hide @, 'test',         nameit 'test',          ( P... ) =>       _test           P...\n    return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _throws: ( T, matcher, f ) ->\n  #   switch arity = arguments.length\n  #     when 2 then [ T, matcher, f, ] = [ T, null, matcher, ]\n  #     when 3 then null\n  #     else throw new Error \"`throws()` needs 2 or 3 arguments, got #{arity}\"\n  #   #.........................................................................................................\n  #   error       = null\n  #   is_matching = null\n  #   #.........................................................................................................\n  #   try ( urge '^992-1^', \"`throws()` result of call:\", f() ) catch error\n  #     #.......................................................................................................\n  #     if matcher?\n  #       is_matching = false\n  #       switch matcher_type = type_of matcher\n  #         when 'text'\n  #           is_matching = error.message is matcher\n  #         when 'regex'\n  #           matcher.lastIndex = 0\n  #           is_matching = matcher.test error.message\n  #         else\n  #           throw new Error \"^992-2^ expected a regex or a text, got a #{matcher_type}\"\n  #       if is_matching\n  #         help '^992-3^', \"OK           \", reverse error.message\n  #       else\n  #         urge '^992-4^', \"error        \", reverse error.message\n  #         warn '^992-5^', \"doesn't match\", reverse rpr matcher\n  #         T?.fail \"^992-6^ error #{rpr error.message} doesn't match #{rpr matcher}\"\n  #     #.......................................................................................................\n  #     else\n  #       help '^992-7^', \"error        \", reverse error.message\n  #   #.........................................................................................................\n  #   unless error?\n  #     warn '^992-8^', reverse message = \"`throws()`: expected an error but none was thrown\"\n  #     T?.fail \"^992-9^ `throws()`: expected an error but none was thrown\"\n  #   #.........................................................................................................\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _match_error: ( error, matcher ) ->\n    switch matcher_type = type_of matcher\n      when 'text'\n        return error.message is matcher\n      when 'regex'\n        matcher.lastIndex = 0\n        return matcher.test error.message\n    return matcher_type\n\n  #---------------------------------------------------------------------------------------------------------\n  _throws: ( T, f, matcher ) ->\n    throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n    error = null\n    #.......................................................................................................\n    try ( urge \"^#{ref}^ `throws()` result of call:\", f() ) catch error\n      unless matcher?\n        help \"^#{ref} ◀ throws@1^ error        \", reverse error.message\n        T?.ok true\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          help \"^#{ref} ◀ throws@2^ OK           \", reverse error.message\n          T?.ok true\n        when false\n          urge \"^#{ref} ◀ throws@3^ error        \", reverse error.message\n          warn \"^#{ref} ◀ throws@4^ doesn't match\", reverse rpr matcher\n          T?.fail \"^#{ref} ◀ throws@5^ error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          message = \"expected a regex or a text, got a #{matcher_type}\"\n          warn \"^#{ref} ◀ throws@6^\", reverse message\n          T?.fail \"^#{ref} ◀ throws@7^ #{message}\"\n    #.......................................................................................................\n    unless error?\n      message = \"`throws()`: expected an error but none was thrown\"\n      warn \"^#{ref} ◀ throws@8^\", reverse message\n      T?.fail \"^#{ref} ◀ throws@9^ #{message}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _throws_async: ( T, f, matcher ) -> # new Promise ( resolve, reject ) =>\n    ###\n\n    * needs `f` to be an `asyncfunction` (although `function` will also work? better check anyway?)\n    * uses `try` / `except` clause to `await` `result` of calling `f`\n    * in case `result` is delivered, that's an error\n    * otherwise an `error` will be caught;\n      * success when `matcher` is missing, or else, when `matcher` describes `error.message`;\n      * failure otherwise\n\n    ###\n    throw new Error \"Ωgt___1 test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n    ### TAINT check whether `f` is `asyncfunction`? ###\n    error = null\n    #.......................................................................................................\n    try\n      result = await f()\n    #.......................................................................................................\n    catch error\n      #.....................................................................................................\n      unless matcher?\n        help \"#{ref} ◀ Ωgt___2 error OK     \", reverse error.message\n        T?.ok true\n        return null\n      #.....................................................................................................\n      switch matcher_type = @_match_error error, matcher\n        when true\n          help \"#{ref} ◀ Ωgt___3 error OK     \", reverse error.message\n          T?.ok true\n        when false\n          urge \"#{ref} ◀ Ωgt___4 error        \", reverse error.message\n          warn \"#{ref} ◀ Ωgt___5 doesn't match\", reverse rpr matcher\n          T?.fail \"#{ref} ◀ Ωgt___6 error #{rpr error.message} doesn't match #{rpr matcher}\"\n        else\n          message = \"expected a regex or a text for matcher, got a #{matcher_type}\"\n          warn \"#{ref} ◀ Ωgt___7\", reverse message\n          T?.fail \"#{ref} ◀ Ωgt___8 #{message}\"\n    #.......................................................................................................\n    unless error?\n      message = \"expected an error but none was thrown, instead got result #{rpr result}\"\n      warn \"#{ref} ◀ Ωgt___9\", reverse message\n      T?.fail \"#{ref} ◀ Ωgt__10 #{message}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _eq: ( T, f, matcher ) ->\n    throw new Error \"^992-1^ test method should be named, got #{rpr f}\" if ( ref = f.name ) is ''\n    ref = ref.padEnd 15\n    #.......................................................................................................\n    try ( result = f() ) catch error\n      message = \"`eq2()`: ^#{ref}^ expected a result but got an an error: #{error.message}\"\n      warn '^992-12^', reverse message\n      T?.fail \"^992-13^ #{message}\"\n      debug '^25235234^', { test_mode}\n      if test_mode is 'throw_errors'\n        throw new Error message\n    #.......................................................................................................\n    if @equals result, matcher\n      help ref, \"EQ OK\"\n      T?.ok true\n    #.......................................................................................................\n    else\n      warn ref, ( reverse ' neq ' ), \"result:     \", ( reverse ' ' + ( rpr result   ) + ' ' )\n      warn ref, ( reverse ' neq ' ), \"matcher:    \", ( reverse ' ' + ( rpr matcher  ) + ' ' )\n      T?.ok false\n    #.......................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  # SET EQUALITY BY VALUE\n  #---------------------------------------------------------------------------------------------------------\n  _set_contains: ( set, value ) ->\n    for element from set\n      return true if @_equals element, value\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  _sets_are_equal: ( a, b ) ->\n    return false unless isa.set b\n    return false unless a.size is b.size\n    for element from a\n      return false unless @_set_contains b, element\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _equals: ( a, b ) ->\n    return false unless ( type_of a ) is ( type_of b )\n    return @_sets_are_equal a, b if isa.set a\n    return _jkequals a, b\n\n\n#===========================================================================================================\nt = new Test()\nmodule.exports = {\n  Test:         Test,\n  test:         t.test,\n  equals:       t.equals,\n  eq:           t.eq,\n  throws:       t.throws,\n  throws_async: t.throws_async, }\n"
  ]
}