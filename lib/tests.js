// Generated by CoffeeScript 1.12.2
(function() {
  var CND, META, alert, badge, debug, echo, fetch_data_from_network, fetch_data_from_unreachable_network, help, info, log, read_file, rpr, settings, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'GUY-TEST/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('./main');

  read_file = function(route, handler) {
    return (require('fs')).readFile(route, {
      encoding: 'utf-8'
    }, function(error, text) {
      return handler(error, text);
    });
  };

  fetch_data_from_network = function(url, handler) {
    return setImmediate((function(_this) {
      return function() {
        return handler(null, 'the webpage you requested');
      };
    })(this));
  };

  fetch_data_from_unreachable_network = function(url, handler) {
    return setImmediate((function(_this) {
      return function() {
        return handler(new Error("network unreachable"));
      };
    })(this));
  };

  META = {};

  this["sync; checks fail"] = function(T) {
    var checks, name;
    name = T.name;
    checks = T.check(META[name]);
    T.eq(checks.length, 2);
    T.eq(CND.remove_colors(checks[0]['message']), 'not equal:\n42\n43\nsee diff above');
    return T.eq(CND.remove_colors(checks[1]['message']), "not OK: false");
  };

  META["sync; checks fail"] = function(T) {
    T.eq(42, 43);
    return T.ok('another test' === 'another spring');
  };

  this["sync; fails because `xxx` is not recognized"] = function(T) {
    var checks, name;
    name = T.name;
    checks = T.check(META[name]);
    T.eq(checks.length, 1);
    return T.eq(checks[0]['message'], 'xxx is not defined');
  };

  META["sync; fails because `xxx` is not recognized"] = function(T) {
    return xxx;
  };

  this["sync; fails because argument to `T.ok` isn't `true`"] = function(T) {
    var checks, name;
    name = T.name;
    checks = T.check(META[name]);
    T.eq(checks.length, 1);
    return T.eq(checks[0]['message'], 'not OK: false');
  };

  META["sync; fails because argument to `T.ok` isn't `true`"] = function(T) {
    return T.ok(123 === 456);
  };

  this["sync; calling `T.fail`, but proceeding with a successful test"] = function(T) {
    var checks, name;
    name = T.name;
    checks = T.check(META[name]);
    T.eq(checks.length, 1);
    return T.eq(checks[0]['message'], 'this was not in my plan');
  };

  META["sync; calling `T.fail`, but proceeding with a successful test"] = function(T) {
    T.fail("this was not in my plan");
    return T.eq(108, 108);
  };

  this["sync; `done` can be used in synchronous tests"] = function(T, done) {
    var i, idx, n;
    n = 0;
    for (idx = i = 0; i < 1000000; idx = ++i) {
      n = (Math.sin(idx)) * (Math.cos(idx + 0.3));
    }
    T.eq(1, 1);
    return done();
  };

  this["sync; `throws` catches exception and tests against string"] = function(T) {
    return T.throws('foo', (function() {
      throw new Error('foo');
    }));
  };

  this["sync; `throws` catches exception and tests against regex"] = function(T) {
    return T.throws(/expected!/, (function() {
      throw new Error('now that was expected!');
    }));
  };

  this["sync; show error message (demo)"] = function(T) {
    return T.eq("this is the result, man", "This is what I expected, man!");
  };

  this["sync; string mismatch produces colored diff message"] = function(T) {
    return warn("skipping test; have to workout how to count failure as success and validate result, side-effects");
  };

  if (module.parent == null) {
    settings = {
      'timeout': 250
    };
    test(this, settings);
  }

}).call(this);

//# sourceMappingURL=tests.js.map
