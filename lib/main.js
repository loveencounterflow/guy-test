// Generated by CoffeeScript 1.8.0
(function() {
  var ASYNC, BNP, TRM, alert, badge, debug, echo, help, info, log, njs_domain, rpr, urge, warn, whisper,
    __slice = [].slice;

  njs_domain = require('domain');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TEST';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  BNP = require('coffeenode-bitsnpieces');

  ASYNC = require('async');

  module.exports = function(x, settings) {
    var new_result_handler_and_tester, report, run, stats;
    if (settings == null) {
      settings = null;
    }

    /* Timeout for asynchronous operations: */
    if (settings == null) {
      settings = {};
    }
    if (settings['timeout'] == null) {
      settings['timeout'] = 1000;
    }
    stats = {
      'test-count': 0,
      'check-count': 0,
      'pass-count': 0,
      'fail-count': 0,
      'failures': {}
    };
    new_result_handler_and_tester = function(test_name) {
      var RH, T;
      RH = {};
      T = {};
      RH.call_with_timeout = function() {
        var P, handler, keeper, keeper_id, method, timeout, _i;
        timeout = arguments[0], method = arguments[1], P = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), handler = arguments[_i++];
        keeper_id = null;
        keeper = function() {
          keeper_id = null;
          warn("(test: " + (rpr(test_name)) + ") timeout reached; proceeding with error");
          return handler(new Error("sorry, timeout reached (" + (rpr(timeout)) + "ms)"));
        };
        keeper_id = setTimeout(keeper, timeout);
        return method.apply(null, __slice.call(P).concat([function() {
          var P1;
          P1 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (keeper_id != null) {
            clearTimeout(keeper_id);
            keeper_id = null;
            return handler.apply(null, P1);
          }
          return whisper("(test: " + (rpr(test_name)) + ") timeout already reached; ignoring");
        }]));
      };
      RH.on_completion = function(handler) {
        whisper("completed: " + (rpr(test_name)));
        return handler();
      };
      RH.on_success = function() {
        stats['pass-count'] += 1;
        return null;
      };
      RH.on_error = function(delta, checked, error) {
        var entry, failures;
        stats['fail-count'] += +1;
        if (error == null) {
          delta += +1;
        }
        entry = BNP.get_caller_info(delta, error, true);
        entry['checked'] = checked;
        entry['message'] = error['message'];
        failures = stats['failures'];
        (failures[test_name] != null ? failures[test_name] : failures[test_name] = []).push(entry);
        return null;
      };
      T.eq = function() {
        var P;
        P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];

        /* Tests whether all arguments are pairwise and deeply equal. Uses CoffeeNode Bits'n'Pieces' `equal`
        for testing as (1) Node's `assert` distinguishes—unnecessarily—between shallow and deep equality, and,
        worse, [`assert.equal` and `assert.deepEqual` are broken](https://github.com/joyent/node/issues/7161),
        as they use JavaScript's broken `==` equality operator instead of `===`.
         */
        stats['check-count'] += 1;
        if (BNP.equals.apply(BNP, P)) {
          return RH.on_success();
        } else {
          return RH.on_error(1, true, new Error("not equal: " + (rpr(P))));
        }
      };
      T.ok = function(result) {

        /* Tests whether `result` is strictly `true` (not only true-ish). */
        stats['check-count'] += 1;
        if (result === true) {
          return RH.on_success();
        } else {
          return RH.on_error(1, true, new Error("not OK: " + (rpr(result))));
        }
      };
      T.fail = function(message) {

        /* Fail with message; do not terminate test execution. */
        stats['check-count'] += 1;
        return RH.on_error(1, true, new Error(message));
      };
      return [RH, T];
    };
    run = function() {
      var RH, T, tasks, test, test_name, _fn, _ref;
      tasks = [];
      _fn = (function(_this) {
        return function(test_name, test, T) {
          var arity;
          switch (arity = test.length) {
            case 1:
              return tasks.push(function(handler) {
                var error;
                try {
                  test(T);
                } catch (_error) {
                  error = _error;
                  RH.on_error(0, false, error);
                }
                whisper("completed: " + (rpr(test_name)));
                return handler();
              });
            case 2:
              return tasks.push(function(handler) {
                var domain;
                domain = njs_domain.create();
                domain.on('error', function(error) {
                  RH.on_error(0, false, error);
                  return RH.on_completion(handler);
                });
                return domain.run(function() {
                  var done, error;
                  done = function(error) {
                    if (error != null) {
                      RH.on_error(0, false, error);
                    }
                    return RH.on_completion(handler);
                  };
                  try {
                    return RH.call_with_timeout(settings['timeout'], test, T, done);
                  } catch (_error) {
                    error = _error;
                    RH.on_error(0, false, error);
                    return RH.on_completion(handler);
                  }
                });
              });
            default:
              throw new Error("expected test with 1 or 2 arguments, got one with " + arity);
          }
        };
      })(this);
      for (test_name in x) {
        test = x[test_name];
        stats['test-count'] += 1;
        test = test.bind(x);
        _ref = new_result_handler_and_tester(test_name), RH = _ref[0], T = _ref[1];
        _fn(test_name, test, T);
      }
      return ASYNC.series(tasks, (function(_this) {
        return function(error) {
          if (error != null) {
            throw error;
          }
          return report();
        };
      })(this));
    };
    report = function() {
      var entries, entry, test_name, _ref, _results;
      info('tests:   ', stats['test-count']);
      info('checks:  ', stats['check-count']);
      info('passes:  ', stats['pass-count']);
      info('fails:   ', stats['fail-count']);
      _ref = stats['failures'];
      _results = [];
      for (test_name in _ref) {
        entries = _ref[test_name];
        help("test case: " + (rpr(test_name)));
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = entries.length; _i < _len; _i++) {
            entry = entries[_i];
            warn(entry['message']);
            warn('  checked:', entry['checked']);
            warn('  ' + entry['route'] + '#' + entry['line-nr']);
            _results1.push(warn('  ' + entry['source']));
          }
          return _results1;
        })());
      }
      return _results;
    };
    return run();
  };

}).call(this);
